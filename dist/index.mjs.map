{"version":3,"sources":["index.js"],"names":["proxyRead"],"mappings":"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","file":"index.js","sourcesContent":["import {\n\tread as proxyRead\n} from \"@aboutweb/proxyscope\";\n\nconst isBound = /^bound .*$/i;\n\nexport default function ProxyClass(...mixins) {\n\tfunction BaseClass(...args) {\n\t\tlet isolated = {};\n\t\tlet stack = mixins.map((mixin) => new mixin(...args));\n\t\tlet proto = Object.getPrototypeOf(this);\n\n\t\tlet proxy = proxyRead(stack, {\n\t\t\tget(target, property, receiver) {\n\t\t\t\tlet host = this.findHost(property);\n\t\t\t\tlet desc;\n\n\t\t\t\tif(host) {\n\t\t\t\t\tdesc = (\n\t\t\t\t\t\tObject.getOwnPropertyDescriptor(host, property)\n\t\t\t\t\t\t|| Object.getOwnPropertyDescriptor(Object.getPrototypeOf(host), property)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\thost = receiver;\n\n\t\t\t\t\tdesc = (\n\t\t\t\t\t\tObject.getOwnPropertyDescriptor(proto, property)\n\t\t\t\t\t\t|| Object.getOwnPropertyDescriptor(Object.getPrototypeOf(proto), property)\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif(desc) {\n\t\t\t\t\tlet { value, get } = desc;\n\n\t\t\t\t\tif(value) {\n\t\t\t\t\t\tif(typeof value == \"function\") {\n\t\t\t\t\t\t\treturn value.bind(host);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(get) {\n\t\t\t\t\t\treturn get.call(host);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tset(target, property, value) {\n\t\t\t\treturn Reflect.set(isolated, property, value);\n\t\t\t},\n\t\t\tgetPrototypeOf(target) {\n\t\t\t\treturn proto;\n\t\t\t}\n\t\t});\n\n\t\tstack.unshift(isolated);\n\n\t\treturn proxy;\n\t}\n\n\tBaseClass.prototype = proxyRead(\n\t\tmixins.map((mixin) => mixin.prototype)\n\t);\n\n\n\treturn BaseClass;\n}\n\nProxyClass.hasInstance = function(...mixins) {\n\tlet BaseClass = ProxyClass(...mixins);\n \tlet delegators = new Set([BaseClass]);\n\n\tmixins.forEach(function(value) {\n\t\tif(value.delegators) {\n\t\t\tvalue.delegators.forEach(function(delegator) {\n\t\t\t\tdelegators.add(delegator);\n\t\t\t});\n\t\t}\n\n\t\tdelegators.add(value.prototype.constructor);\n\t});\n\n\tdelegators.forEach(function(delegator) {\n\t\tvar oldInstanceOf = delegator[Symbol.hasInstance];\n\n\t\tObject.defineProperty(\n\t\t\tdelegator,\n\t\t\tSymbol.hasInstance, {\n\t\t\t\tconfigurable : true,\n\t\t\t\tvalue : function(instance) {\n\t\t\t\t\tif(this == delegator) {\n\t\t\t\t\t\t/*return (\n\t\t\t\t\t\t\tmixins.some((mixin) => mixin.prototype.isPrototypeOf(instance))\n\t\t\t\t\t\t\t|| oldInstanceOf.call(delegator, instance)\n\t\t\t\t\t\t);*/\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tBaseClass.prototype.isPrototypeOf(instance)\n\t\t\t\t\t\t\t|| oldInstanceOf.call(delegator, instance)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn oldInstanceOf.call(this, instance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t});\n\n\tBaseClass.delegators = delegators;\n\n\treturn BaseClass;\n}\n\n/*\nfunction() {\n\tfunction BaseClass(...args) {\n\t\t//let instance = {};\n\t\tlet stack = mixins.map((mixin) => new mixin(...args));\n\n\t\tlet superProperty = (property) => {\n\t\t\tfor(let i = 0, length = stack.length; i < length; i++) {\n\t\t\t\tlet level = stack[i];\n\n\t\t\t\tif(property in level) {\n\t\t\t\t\tlet value = level[property];\n\n\t\t\t\t\tif(typeof value == \"function\" && !isBound.test(value.name)) {\n\t\t\t\t\t\treturn value.bind(level);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet proto = Object.getPrototypeOf(this);\n\n\t\tObject.setPrototypeOf(this, proxyRead(\n\t\t\tproto,\n\t\t\t{\n\t\t\t\tget(target, property) {\n\t\t\t\t\tconsole.log(\"super get\", property)\n\t\t\t\t\treturn superProperty(property);\n\t\t\t\t},\n\t\t\t\tgetPrototypeOf() {\n\t\t\t\t\treturn proto;\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\n\n\t\tlet proxy = proxyRead(stack, {\n\t\t\tget(target, property, receiver) {\n\n\n\n\n\t\t\t\tlet desc = Reflect.getOwnPropertyDescriptor(proto, property);\n\n\t\t\t\tif(!desc) {\n\t\t\t\t\tlet sub = Reflect.getPrototypeOf(proto);\n\n\t\t\t\t\tif(sub) {\n\t\t\t\t\t\tdesc = Reflect.getOwnPropertyDescriptor(sub, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tif(desc) {\n\t\t\t\t\tlet { value, get } = desc;\n\n\t\t\t\t\tif(value && typeof value == \"function\") {\n\t\t\t\t\t\treturn value.bind(receiver);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(get && typeof get) {\n\t\t\t\t\t\treturn get.call(receiver);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn superProperty(property);\n\t\t\t},\n\t\t\tset(target, property, value) {\n\t\t\t\treturn Reflect.set(instance, property, value);\n\t\t\t},\n\t\t\tgetPrototypeOf(target) {\n\t\t\t\treturn proto;\n\t\t\t}\n\t\t});\n\n\t\t//stack.unshift(instance);\n\n\t\treturn proxy;\n\t}\n\n\tBaseClass.prototype = proxyRead(\n\t\tmixins.map((mixin) => Object.create(mixin.prototype)),\n\t\t{\n\t\t\tget(target, property) {\n\t\t\t\tconsole.log(\"super get\", property)\n\t\t\t\t//return superProperty(property);\n\t\t\t},\n\t\t\tgetPrototypeOf() {\n\t\t\t\tconsole.log(\"getproto\")\n\n\t\t\t}\n\t\t}\n\n\t);\n\n\treturn BaseClass;\n\n\nProxyClass.hasInstance = function(...mixins) {\n\tlet BaseClass = ProxyClass(...mixins);\n \tlet delegators = new Set([BaseClass]);\n\n\tmixins.forEach(function(value) {\n\t\tif(value.delegators) {\n\t\t\tvalue.delegators.forEach(function(delegator) {\n\t\t\t\tdelegators.add(delegator);\n\t\t\t});\n\t\t}\n\n\t\tdelegators.add(value.prototype.constructor);\n\t});\n\n\tdelegators.forEach(function(delegator) {\n\t\tvar oldInstanceOf = delegator[Symbol.hasInstance];\n\n\t\tObject.defineProperty(\n\t\t\tdelegator,\n\t\t\tSymbol.hasInstance, {\n\t\t\t\tconfigurable : true,\n\t\t\t\tvalue : function(instance) {\n\t\t\t\t\tif(this == delegator) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tBaseClass.prototype.isPrototypeOf(instance)\n\t\t\t\t\t\t\t|| oldInstanceOf.call(delegator, instance)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn oldInstanceOf.call(this, instance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t});\n\n\tBaseClass.delegators = delegators;\n\n\treturn BaseClass;\n}\n}\n*/\n"]}